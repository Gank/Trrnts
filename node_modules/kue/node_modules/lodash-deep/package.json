{
  "name": "lodash-deep",
  "version": "1.2.1",
  "description": "Lodash mixins for (deep) object accessing / manipulation.",
  "main": "lodash-deep.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "lodash": ">=2.4.1"
  },
  "devDependencies": {
    "karma": "~0.11.9",
    "karma-chrome-launcher": "~0.1.2",
    "karma-jasmine": "~0.1.5",
    "gulp": "~3.3.0",
    "gulp-uglify": "~0.1.0",
    "gulp-karma": "0.0.1",
    "gulp-rename": "~0.2.1"
  },
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/marklagendijk/lodash-deep.git"
  },
  "keywords": [
    "lodash",
    "mixin",
    "mixins",
    "deep",
    "object",
    "walking"
  ],
  "author": {
    "name": "Mark Lagendijk",
    "email": "mark@lagendijk.info"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/marklagendijk/lodash-deep/issues"
  },
  "homepage": "https://github.com/marklagendijk/lodash-deep",
  "readme": "# lodash-deep\r\nLodash mixins for (deep) object accessing / manipulation.\r\n\r\n## Installation\r\n### Bower\r\n1. `bower install lodash-deep`\r\n2. Reference `lodash-deep.min.js` after `lodash.min.js`\r\n\r\n### Node.js\r\n1. `npm install lodash`\r\n2. `npm install lodash-deep`\r\n3. \r\n    ``` javascript\r\n\r\n    var _ = require(\"lodash\");\r\n    _.mixin(require(\"lodash-deep\"));\r\n    ```\r\n\r\n## Docs\r\nThe following mixins are included in `lodash-deep`:\r\n- [_.deepSet](#_deepsetobject-propertypath-value)\r\n- [_.deepGet](#_deepgetobject-propertypath)\r\n- [_.deepOwn](#_deepownobject-propertypath)\r\n- [_.deepPluck](#_deeppluckcollection-propertypath)\r\n- [_.deepIn](#_deepinobject-propertypath)\r\n- [_.deepHas](#_deephasobject-propertypath)\r\n\r\n### _.deepSet(object, propertyPath, value)\r\nSets a value of a property in an object tree. Any missing objects will be created.\r\n\r\n#### object\r\nType: `Object`\r\n\r\nThe root object of the object tree.\r\n\r\n#### propertyPath\r\nType: `string`\r\n\r\nThe dot separated propertyPath.\r\n\r\n#### value\r\nType: `*`\r\n\r\nThe value to set.\r\n\r\n#### returns\r\nType: `Object`\r\n\r\n``` javascript\r\nvar object = {};\r\n_.deepSet(object, 'level1.level2.level3.value', 'value 3');\r\n// -> { level1: { level2: { level3: { value: 'value 3' }}}}\r\n_.deepSet(object, 'level1.level2.level3.value', 'foo');\r\n// -> { level1: { level2: { level3: { value: 'foo' }}}}\r\n```\r\n\r\n### _.deepGet(object, propertyPath)\r\nRetreives the value of a property in an object tree.\r\n\r\n#### object\r\nType: `Object`\r\n\r\nThe root object of the object tree.\r\n\r\n#### propertyPath\r\nType: `string`\r\n\r\nThe dot separated propertyPath.\r\n\r\n#### returns\r\nType: `*|undefined`\r\n\r\nThe value, or undefined if it doesn't exists.\r\n\r\n``` javascript\r\nvar object = {\r\n\tlevel1: {\r\n\t\tvalue: 'value 1',\r\n\t\tlevel2: Object.create({\r\n\t\t\tlevel3: {\r\n\t\t\t\tvalue: 'value 3'\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n};\r\n_.deepGet(object, 'level1.value');\r\n// -> 'value 1'\r\n_.deepGet(object, 'level1.level2.level3.value');\r\n// -> 'value 3'\r\n_.deepGet(object, 'foo.bar.baz');\r\n// -> undefined\r\n```\r\n\r\n### _.deepOwn(object, propertyPath)\r\nRetreives the value of a *own* property in an object tree.\r\n\r\n#### object\r\nType: `Object`\r\n\r\nThe root object of the object tree.\r\n\r\n#### propertyPath\r\nType: `string`\r\n\r\nThe dot separated propertyPath.\r\n\r\n#### returns\r\nType: `*|undefined`\r\n\r\nThe value, or undefined if it doesn't exists.\r\n\r\n``` javascript\r\nvar object = {\r\n\tlevel1: {\r\n\t\tvalue: 'value 1',\r\n\t\tlevel2: Object.create({\r\n\t\t\tlevel3: {\r\n\t\t\t\tvalue: 'value 3'\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n};\r\n_.deepOwn(object, 'level1.value');\r\n// -> 'value 1'\r\n_.deepOwn(object, 'level1.level2.level3.value');\r\n// -> undefined\r\n_.deepOwn(object, 'foo.bar.baz');\r\n// -> undefined\r\n```\r\n\r\n### _.deepPluck(collection, propertyPath)\r\nExecutes a deep pluck on an collection of object trees.\r\n\r\n#### collection\r\nType: `Object|Array`\r\n\r\nThe collection of object trees.\r\n\r\n#### propertyPath\r\nType: `string`\r\n\r\nThe dot separated propertyPath.\r\n\r\n#### returns\r\nType: `Array`\r\n\r\n``` javascript\r\nvar collection = [\r\n\t{ level1: { level2: { level3: { value: 1 }}}},\r\n\t{ level1: { level2: { level3: { value: 2 }}}},\r\n\t{ level1: { level2: { level3: { value: 3 }}}},\r\n\t{ level1: { level2: { level3: { value: 4 }}}},\r\n\t{ level1: { level2: {} }},\r\n\t{}\r\n];\r\n_.deepPluck(collection, 'level1.level2.level3.value');\r\n// -> [ 1, 2, 3, 4, undefined, undefined ]\r\n```\r\n\r\n### _.deepIn(object, propertyPath)\r\nExecutes a deep check for the existence of a property in an object tree.\r\n\r\n#### object\r\nType: `Object`\r\n\r\nThe root object of the object tree.\r\n\r\n#### propertyPath\r\nType: `string`\r\n\r\nThe dot separated propertyPath.\r\n\r\n#### returns\r\nType: `boolean`\r\n\r\n``` javascript\r\nvar object = {\r\n\tlevel1: {\r\n\t\tlevel2: Object.create({\r\n\t\t\tlevel3: {\r\n\t\t\t\tvalue: 'value 3'\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n};\r\n_.deepIn(object, 'level1');\r\n// -> true\r\n_.deepIn(object, 'level1.level2');\r\n// -> true\r\n_.deepIn(object, 'level1.level2.level3');\r\n// -> true\r\n_.deepIn(object, 'level1.level2.level3.value');\r\n// -> true\r\n```\r\n\r\n### _.deepHas(object, propertyPath)\r\nExecutes a deep check for the existence of a *own* property in an object tree.\r\n\r\n#### object\r\nType: `Object`\r\n\r\nThe root object of the object tree.\r\n\r\n#### propertyPath\r\nType: `string`\r\n\r\nThe dot separated propertyPath.\r\n\r\n#### returns\r\nType: `boolean`\r\n\r\n``` javascript\r\nvar object = {\r\n\tlevel1: {\r\n\t\tlevel2: Object.create({\r\n\t\t\tlevel3: {\r\n\t\t\t\tvalue: 'value 3'\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n};\r\n_.deepHas(object, 'level1');\r\n// -> true\r\n_.deepHas(object, 'level1.level2');\r\n// -> true\r\n_.deepHas(object, 'level1.level2.level3');\r\n// -> false\r\n_.deepHas(object, 'level1.level2.level3.value');\r\n// -> false\r\n```\r\n\r\n### Function name change\r\nIn version 1.2.0 function names were simplified. Backward compatibility with the old names remains in place.\r\n",
  "readmeFilename": "README.md",
  "_id": "lodash-deep@1.2.1",
  "dist": {
    "shasum": "e9fecb44af2af78ded8a927790bd9b5a739d7742"
  },
  "_from": "lodash-deep@^1.1.0",
  "_resolved": "https://registry.npmjs.org/lodash-deep/-/lodash-deep-1.2.1.tgz"
}
